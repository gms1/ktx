#!/usr/bin/env bash

# Copyright 2017 Heptio Inc.
# Copyright 2024 Guenter Sandner
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#**********************************************************************
# ktx-list: list all configs in ~/.kube
#----------------------------------------------------------------------
ktx-list() {
  find "${HOME}/.kube/" -maxdepth 1 -type f -and \( -not -name ".*" \) -exec basename {} \; 2>/dev/null
}

###############################################################################################
# ktx-print-configs: print all configs in ~/.kube
#----------------------------------------------------------------------

ktx-print-configs() {
  local active="$(ktx-config)"
  local default="$(KUBECONFIG='' ktx-config)"
  local configs=( $(ktx-list) )
  local config

  if [ -n "${active}" ]; then
    echo -n "* ${active}"
    if [ "${active}" = "${default}" ]; then
      echo " (default)"
    else
      echo
    fi
  fi

  if [ "${#configs[@]}" -eq 0 ]; then
    echo "ERROR: No configs present in ${HOME}/.kube." 1>&2
    return 1
  fi

  for config in "${configs[@]}"; do
    [ "${config}" != "${active}" ] || continue
    echo -n "  ${config}"
    if [ "${config}" = "${default}" ]; then
      echo " (default)"
    else
      echo
    fi
  done
  return 0
}

###############################################################################################
# ktx-config: set default kubectl config via ~/.kube/config symbolic link to the given argument
#      or print the active kubectl config if no argument is given
#----------------------------------------------------------------------
ktx-config() {
  local config="${1}"

  if [ ! -d "${HOME}/.kube" ]; then
    mkdir -p "${HOME}/.kube"
    chmod go-rwx "${HOME}/.kube"
  fi

  if [ -z "${config}" -o "${config,,}" = "none" ]; then
    if [ -n "${KUBECONFIG}" ]; then
      config=$(echo "${KUBECONFIG}"  | cut -d ':' -f 1)
      if [ -f "${config}" ]; then
        config=$(realpath "${config}")
        if [ $(dirname -- "${config}") = $(realpath "${HOME}/.kube") ]; then
          basename -- "${config}"
        else
          echo "${config}"
        fi
        return 0
      else
        echo "ERROR: KUBECONFIG '${KUBECONFIG}': '${config}' does not exist" 1>&2
        return 1
      fi
    else
      if [ -f "${HOME}/.kube/config" ]; then
        config=$(realpath "${HOME}/.kube/config")
        if [ $(dirname -- "${config}") = $(realpath "${HOME}/.kube") ]; then
          basename -- "${config}"
        else
          echo "${config}"
        fi
        return 0
      fi
      if [ -h "${HOME}/.kube/config" ]; then
        echo "ERROR: '${HOME}/.kube/config' is a dangling symbolic link" 1>&2
        return 1
      fi
      if [ -e "${HOME}/.kube/config" ]; then
        echo "ERROR: '${HOME}/.kube/config' is neither a symbolic link nor a regular file" 1>&2
        return 1
      fi
      return 1
    fi
  else
    if [ -e "${HOME}/.kube/config" -a ! -h "${HOME}/.kube/config" ]; then
      echo "ERROR: '${HOME}/.kube/config' exists but is not a symbolic link" 1>&2
      return 1
    fi
    rm -f "${HOME}/.kube/config"
    if [[ "${config}" =~ \/|^config$ ]]; then
      echo "ERROR: config named '${config}' is not allowed" 1>&2
      return 1
    fi
    if [ ! -f "${HOME}/.kube/${config}" ]; then
      echo "ERROR: The file '${HOME}/.kube/${config}' does not exist" 1>&2
      return 1
    fi
    if ! ln -s "${config}" "${HOME}/.kube/config"; then
      echo "ERROR: failed to create symbolic link '${HOME}/.kube/config' to '${HOME}/.kube/${config}'" 1>&2
      return 1
    fi
  fi
}

###############################################################################################
# ktx: change kubectl config via KUBECONFIG variable to the given argument
#   or list available configs if no argument is given
#----------------------------------------------------------------------

ktx() {
  local config="${1}"

  if [ -z "${config}" ]; then
    ktx-print-configs
    return $?
  fi

  if [ "${config,,}" = "none" -o "${config}" = "config" ]; then
      unset KUBECONFIG
      ktx-config
      return $?
  fi

  if [ -f "${HOME}/.kube/${config}" ]; then
      export KUBECONFIG="${HOME}/.kube/${config}"
      return 0
  else
      echo "ERROR: The file '${HOME}/.kube/${config}' does not exist" 1>&2
      return 1
  fi
}

#**********************************************************************
# kns-list: list all namespaces in current-context
#----------------------------------------------------------------------
kns-list() {
  kubectl get namespace -o jsonpath='{$.items[*].metadata.name}'
}

###############################################################################################
# kns: change default namespace for current kubectl config
#   or list available namespaces if no argument is given
#----------------------------------------------------------------------

kns() {
  local ns="${1}"
  local current
  local current_exist=0
  local ctx


  if [ -z "${ns}" ]; then
    ctx=$(kubectl config current-context)
    if [ -z "${ctx}" ]; then
      echo "ERROR: No current context" 1>&2
      return 1
    fi
    current=$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${ctx}\")].context.namespace}")
    current_exist=0
    for ns in $(kns-list); do
      if [ "${current}" = "${ns}" ]; then
        echo "* ${current}"
        current_exist=1
      else
        echo "  ${ns}"
      fi
    done
    if [ "${current_exist}" -eq 0 ]; then
      echo "* ${current}: NOT FOUND"
    fi
    return 0
  fi
  kubectl config set-context --current --namespace="${ns}" >/dev/null
}

###############################################################################################
# exports

export -f ktx-list
export -f ktx-print-configs
export -f ktx-config
export -f ktx
export -f kns-list
export -f kns

###############################################################################################
# completion

_ktx() {
  [ "${COMP_CWORD}" -eq 1 ] || return
  if [ -n "${KUBECONFIG}" ]; then
    COMPREPLY=( $(compgen -W "$(ktx-list) NONE" -- "${COMP_WORDS[1]}") )
  else
    COMPREPLY=( $(compgen -W "$(ktx-list)" -- "${COMP_WORDS[1]}") )
  fi
}
complete -F _ktx ktx
complete -F _ktx ktx-config

_kns() {
  [ "${COMP_CWORD}" -eq 1 ] || return
  COMPREPLY=( $(compgen -W "$(kns-list)" -- "${COMP_WORDS[1]}") )
}

complete -F _kns kns
